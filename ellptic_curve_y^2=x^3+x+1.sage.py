

# This file was *autogenerated* from the file ellptic_curve_y^2=x^3+x+1.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_7 = Integer(7)#elliptic curve y^2=x^3+x+1 in normal form
E=EllipticCurve([_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ])
E.rank()

#compute torsion points
E.torsion_points()

#curve is singular over F_2
#E2=EllipticCurve(GF(2), [0,0,0,1,1])

#we can still compute the number of points over extensions F_2.
#let's compute for fields where the exponent m of 2^m divides the exponent n of 2^n
#find points of curve over extensions of F_2^1, e.g. F_2^2=4, F_2^4=16, F_2^5=32
def g(x,y):
    return y**_sage_const_2 -x**_sage_const_3 +x+_sage_const_1 

#find zeros of f(x,y) over degree 3 field extension F_8 of F_2 \isom F_2[x]/(x^3+x+1)

#arithmetic over field extensions of F_2
P = PolynomialRing(GF(_sage_const_2 ), names=('x',)); (x,) = P._first_ngens(1)
f = x**_sage_const_3  + x + _sage_const_1  # Fano Polynomial
k = GF(_sage_const_2 **_sage_const_3 , modulus=f, names=('a',)); (a,) = k._first_ngens(1)
k.modulus()
x**_sage_const_3 +x+_sage_const_1 
a**(_sage_const_2 **_sage_const_3 )

#evaluate curve over F_7
E2=EllipticCurve(GF(_sage_const_7 ), [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ])

#compute number of points
E2.order()

