

# This file was *autogenerated* from the file ellptic_curve_y^2=x^3+x+1.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_8 = Integer(8); _sage_const_7 = Integer(7); _sage_const_100 = Integer(100)#elliptic curve y^2=x^3+x+1 in normal form
E=EllipticCurve([_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ])
E.rank()

#compute torsion points
E.torsion_points()

#curve is singular over F_2
#E2=EllipticCurve(GF(2), [0,0,0,1,1])

#we can still compute the number of points over extensions F_2.
#let's compute for fields where the exponent m of 2^m divides the exponent n of 2^n
#find points of curve over extensions of F_2^1, e.g. F_2^2=4, F_2^4=16, F_2^5=32
def g(x,y):
    return y**_sage_const_2 -x**_sage_const_3 +x+_sage_const_1 

#arithmetic over field extensions of F_2
P = PolynomialRing(GF(_sage_const_2 ), names=('x',)); (x,) = P._first_ngens(1)
f = x**_sage_const_3  + x + _sage_const_1  # Fano Polynomial
k = GF(_sage_const_2 **_sage_const_3 , modulus=f, names=('a',)); (a,) = k._first_ngens(1)
k.modulus()
x**_sage_const_3 +x+_sage_const_1 
a**(_sage_const_2 **_sage_const_3 )

#find zeros of f(x,y) over degree 3 field extension F_8 of F_2 \isom F_2[x]/(x^3+x+1)
[g(_sage_const_0 ,_sage_const_0 ),g(_sage_const_1 ,_sage_const_0 ),g(_sage_const_0 ,_sage_const_1 ),g(_sage_const_1 ,_sage_const_1 ),g(a,_sage_const_0 ),g(a,_sage_const_1 ),g(a,a),g(a,a**_sage_const_2 ),g(a,a**_sage_const_3 )]

#perform a grid search for points over F_8
solutions_over_F_8 = []
for i in range(_sage_const_8 ):
    for j in range(_sage_const_8 ):
        if g(a**i,a**j) == _sage_const_0 :
            solutions_over_F_8.append((i,j))
print(solutions_over_F_8)

#evaluate curve over F_7
E2=EllipticCurve(GF(_sage_const_7 ), [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ])

#compute number of points
E2.order()

#the Zeta function over F_7 is a rational function of T. What is it? Only need q^n for all n.
#for algebraic closure of F_7, \union_{m|n}F_7^m. Dylan Yott? Community seminar? Is this a bug?
#dividing_exponents_seven = [7^1,7^2,7^4,7^8]
#Rob: the number of points over 7^n are determined by the number of points over F_7, and \alpha, \beta
N=_sage_const_100 
number_of_points_over_extensions_of_F_7 = []
for n in range(_sage_const_1 ,N):
    number_of_points_over_extensions_of_F_7+=[EllipticCurve(GF(_sage_const_7 **n), [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ]).order()]

#build the Zeta function for the finite field F_7 and the elliptic curve y^2=x^3+x+1
#the shape of the Zeta function should be something like (1-\alpha*T)*(1-\beta*T)/((1-T)*(1-qT)) where
#q is the order of the finite field of interest, for instance q=7^m. Setting m=1, we can look at q=7.
#What are the complex numbers \alpha and \beta?

#let's examine the algebraic variety E3 over the finite field F_7, and compute an approximation of the Zeta function
var('T')
print(T)
def zeta(q,T):
    return sum(exp(number_of_points_over_extensions_of_F_7[n]*T**n/n) for n in range(_sage_const_1 ,N-_sage_const_2 ))

#zeta(7,T) = (1-\alpha*T)(1-\beta*T)/((1-T)*(1-qT)) thanks to Joe Silverman.
#\alpha = (3+\sqrt{19}*i)/14, \beta = \overline{\alpha}

